name: Dotori Client CI

on:
  push:
    branches: [ "feature/cicd" ]
  pull_request:
    branches: [ "feature/cicd" ]

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
    - name: Create .env
      run: |
        echo "GENERATE_SOURCEMAP=${{secrets.GENERATE_SOURCEMAP}}" >> .env
        echo "REACT_APP_NEIS_API_KEY=${{secrets.REACT_APP_NEIS_API_KEY}}" >> .env
        echo "REACT_APP_FIREBASE_API_KEY=${{secrets.REACT_APP_FIREBASE_API_KEY}}" >> .env
        echo "REACT_APP_FIREBASE_AUTH_DOMAIN=${{secrets.REACT_APP_FIREBASE_AUTH_DOMAIN}}" >> .env
        echo "REACT_APP_FIREBASE_PROJECT_ID=${{secrets.REACT_APP_FIREBASE_PROJECT_ID}}" >> .env
        echo "REACT_APP_FIREBASE_STORAGE_BUCKET=${{secrets.REACT_APP_FIREBASE_STORAGE_BUCKET}}" >> .env
        echo "REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID}}" >> .env
        echo "REACT_APP_FIREBASE_APP_ID=${{secrets.REACT_APP_FIREBASE_APP_ID}}" >> .env
        echo "REACT_APP_FIREBASE_MEASUREMENT_ID=${{secrets.REACT_APP_FIREBASE_MEASUREMENT_ID}}" >> .env
        echo "REACT_APP_YOUTUBE_API_KEY=${{secrets.REACT_APP_YOUTUBE_API_KEY}}" >> .env
        cat .env
      # env:
      #     ENV: $({secrets.ENV})

    - name: Checkout source code.   # Repo checkout
      uses: actions/checkout@v2
      
    - name: Check Node v            # Node v 확인
      run: node -v

    - name: Install Dependencies    # 의존 파일 설치
      run: yarn install --frozen-lockfile

    - name: Build                   # React Build
      run: yarn build

    - name: Dotori Client CI Success Discord Notification
      uses: sarisia/actions-status-discord@v1
      if: ${{ success() }}
      with:
        title: 🎉 Dotori Client CI 🐿
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        color: 00FF00
    - name: Dotori Client CI Fail Discord Notification
      uses: sarisia/actions-status-discord@v1
      if: ${{ failure() }}
      with:
        title: ❌ Dotori Client CI 🐿
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        color: FF0000