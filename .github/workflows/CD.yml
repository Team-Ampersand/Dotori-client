name: Dotori Client CD

on:
  push:
    branches: [ feature/cicd ]

jobs:

  build:
    runs-on: ubuntu-latest


    steps:
      - name: Create .env             # .env 파일 설정
        env:
          GENERATE_SOURCEMAP: ${{secrets.GENERATE_SOURCEMAP}}
          REACT_APP_NEIS_API_KEY: ${{secrets.REACT_APP_NEIS_API_KEY}}
          REACT_APP_FIREBASE_API_KEY: ${{secrets.REACT_APP_FIREBASE_API_KEY}}
          REACT_APP_FIREBASE_AUTH_DOMAIN: ${{secrets.REACT_APP_FIREBASE_AUTH_DOMAIN}}
          REACT_APP_FIREBASE_PROJECT_ID: ${{secrets.REACT_APP_FIREBASE_PROJECT_ID}}
          REACT_APP_FIREBASE_STORAGE_BUCKET: ${{secrets.REACT_APP_FIREBASE_STORAGE_BUCKET}}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID}}
          REACT_APP_FIREBASE_APP_ID: ${{secrets.REACT_APP_FIREBASE_APP_ID}}
          REACT_APP_FIREBASE_MEASUREMENT_ID: ${{secrets.REACT_APP_FIREBASE_MEASUREMENT_ID}}
          REACT_APP_YOUTUBE_API_KEY: ${{secrets.REACT_APP_YOUTUBE_API_KEY}}
        run: |
          touch .env
          echo GENERATE_SOURCEMAP="$secrets.GENERATE_SOURCEMAP" >> .env
          echo REACT_APP_NEIS_API_KEY="$secrets.REACT_APP_NEIS_API_KEY" >> .env
          echo REACT_APP_FIREBASE_API_KEY="$secrets.REACT_APP_FIREBASE_API_KEY" >> .env
          echo REACT_APP_FIREBASE_AUTH_DOMAIN="$secrets.REACT_APP_FIREBASE_AUTH_DOMAIN" >> .env
          echo REACT_APP_FIREBASE_PROJECT_ID="$secrets.REACT_APP_FIREBASE_PROJECT_ID" >> .env
          echo REACT_APP_FIREBASE_STORAGE_BUCKET="$secrets.REACT_APP_FIREBASE_STORAGE_BUCKET" >> .env
          echo REACT_APP_FIREBASE_MESSAGING_SENDER_ID="$secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID" >> .env
          echo REACT_APP_FIREBASE_APP_ID="$secrets.REACT_APP_FIREBASE_APP_ID" >> .env
          echo REACT_APP_FIREBASE_MEASUREMENT_ID="$secrets.REACT_APP_FIREBASE_MEASUREMENT_ID" >> .env
          echo REACT_APP_YOUTUBE_API_KEY="$secrets.REACT_APP_YOUTUBE_API_KEY" >> .env
          cat .env

      - name: Checkout source code.   # Repo checkout
        uses: actions/checkout@v2
      
      - name: Check Node v            # Node v 확인
        run: node -v

      - name: Install Dependencies    # 의존 파일 설치
        run: yarn install --frozen-lockfile

      - name: Build                   # React Build
        run: 
          CI=false yarn build

      - name: Configure AWS Credentials # AWS 자격 증명ㄴ
        uses: aws-actions/configure-aws-credentials@b8c74de753fbcb4868bf2011fb2e15826ce973af
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3               # Upload build file to S3
        run: |
          aws s3 sync --region ap-northeast-2 build/ s3://client-cd-test --delete

      - name: Dotori Client CD Success Discord Notification
        uses: sarisia/actions-status-discord@v1
        if: ${{ success() }}
        with:
          title: 🎉 Dotori Client CD 🐿
          webhook: ${{ secrets.DISCORD_WEBHOOK_CD }}
          color: 00FF00
        
      - name: Dotori Client CD Fail Discord Notification
        uses: sarisia/actions-status-discord@v1
        if: ${{ failure() }}
        with:
          title: ❌ Dotori Client CD 🐿
          webhook: ${{ secrets.DISCORD_WEBHOOK_CD }}
          color: FF0000